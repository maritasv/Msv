@page "/freelancers"
@using HINVenture.Shared
@inject HttpClient Http
@inject ApiAuthenticationStateProvider _StateProvider

<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<style>
    .sort-th {
        cursor: pointer;
    }

    .fa {
        float: right;
    }
</style>


@if (isAccessDenied == false)
{
    <p>Access denied</p>
}
else
{

    <h1>Our freelancers</h1>


    @if (freels == null && specialities == null)
    {
        <p><em>Loading...</em></p>

    }
    else
    {

        <table class="table table-bordered table-hover">
            <thead>
            <tr> 
                <th class="sort-th" @onclick="@(() => SortTable("Id"))">
                    Username
                    <span class="fa @(SetSortIcon("Id"))"></span>
                </th>
                <th class="sort-th" @onclick="@(() => SortTable("Price"))">
                    Specialties
                    <span class="fa @(SetSortIcon("Price"))"></span>
                </th>
                <th class="sort-th" @onclick="@(() => SortTable("Rate"))">
                    Rating
                    <span class="fa @(SetSortIcon("Rate"))"></span>
                </th>
            </tr>
            </thead>
            <tbody>
            @foreach (var freel in freels)
            {
                <tr>
                    <td>@freel.ApplicationUser.FullName </td>
                    <th>
                            @freel.Specs.Name
                    </th>
                    <td>@freel.Rate</td>
                </tr>
            }
            </tbody>
        </table>

    }
}

@code {

    bool isAccessDenied = false;
    private List<FreelancerUser> freels;
    private List<Speciality> specialities;
    string role;

    protected override async Task OnInitializedAsync()
    {

        var state = await _StateProvider.GetAuthenticationStateAsync();

        if (state.User.IsInRole("customer"))
        {
            isAccessDenied = true;
            freels = await Http.GetFromJsonAsync<List<FreelancerUser>>($"api/Freelancers/GetAllFreelancers");
            specialities = await Http.GetFromJsonAsync<List<Speciality>>($"api/Specialities/GetAllSpecialities");

        }
    }
    private bool isSortedAscending;
    private string activeSortColumn;
    private void SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            freels = freels.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                freels = freels.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                freels = freels.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            isSortedAscending = !isSortedAscending;
        }
    }
    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }
}