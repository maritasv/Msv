@page "/freelancers"
@using HINVenture.Shared
@inject HttpClient Http
@inject ApiAuthenticationStateProvider _StateProvider



@if (isAccessDenied == false)
{
    <p>Access denied</p>
}
else
{

    <h1>Out freelancers</h1>


    @if (freels == null && specialities == null)
    {
        <p><em>Loading...</em></p>

    }
    else
    {
      <ul>
             @foreach (var speciality in specialities )
             {
          <li>
              <input type="checkbox" @onchange="async (eventArgs) => await CheckboxClicked(speciality, eventArgs)" />
              <label>@speciality.Name</label>
          </li>
             }
        </ul>

        <table class="table">
            <thead>
                <tr>
                    <th>Username</th>
                    <th>Specialties</th>
                    <th>Rate</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var freel in freels)
                {
                    <tr>
                        <td>@freel.ApplicationUser.FullName</td>
                        <th>
                            @foreach (var spec in freel.Specs)
                            {
                                <span style="padding-left: 10px">@spec.Speciality.Name</span>
                            }
                            </th>
                        <th>@freel.Rate</th>
                    </tr>
                }
            </tbody>
        </table>

    }
}

@code {

    bool isAccessDenied = false;
    private List<FreelancerUser> freels;
    private List<Speciality> specialities;
    string role;

    protected override async Task OnInitializedAsync()
    {

        var state = await _StateProvider.GetAuthenticationStateAsync();

        if (state.User.IsInRole("customer"))
        {
            isAccessDenied = true;
            freels = await Http.GetFromJsonAsync<List<FreelancerUser>>($"api/Freelancers/GetAllFreelancers");
            specialities = await Http.GetFromJsonAsync<List<Speciality>>($"api/Specialities/GetAllSpecialities");

        }
    }

    async Task CheckboxClicked(Speciality speciality, ChangeEventArgs checkedValue)
    {
        if ((bool)checkedValue.Value == true)
        {
            if (!specialities.Contains(speciality))
            {
                freels.RemoveAll(a => a.Specs.Count(a => a.SpecialityId == speciality.Id) == 0);
                freels.AddRange(await Http.GetFromJsonAsync<List<FreelancerUser>>($"api/Freelancers/GetFreelancersBySpec/{speciality.Id}"));

            }
        }
        else
        {
            if (specialities.Contains(speciality))
            {
                freels.RemoveAll(a => a.Specs.Count(a => a.SpecialityId == speciality.Id) == 0);
            }
        }
    }
}