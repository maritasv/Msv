@page "/OrderInfo"
@page "/OrderInfo/{id:int}"
@inject HttpClient _httpClient
@inject NavigationManager _navigationManager
@inject ApiAuthenticationStateProvider _stateProvider
@using Microsoft.AspNetCore.SignalR.Client


@if (isAccessDenied == false)
{
    <p>Access denied</p>
}
else
{
    <h3>Working with order @Id</h3>

    <hr />
    <div class="form-group row">
        <label for="firstName" class="col-sm-2 col-form-label">
            Title
        </label>
        <div class="col-sm-10">
            @if (state.User.IsInRole("freelancer"))
            {
                <input type="text" id="title" class="form-control" placeholder="Title" readonly="readonly"
                       @bind-value="@order.Title" />
            }
            @if (state.User.IsInRole("customer"))
            {
                <p>@order.Title</p>
            }
        </div>
    </div>

    <div class="form-group row">
        <label for="description" class="col-sm-2 col-form-label">
            Description
        </label>
        <div class="col-sm-10">
            @if (state.User.IsInRole("freelancer"))
            {
                <input type="text" id="description" class="form-control" placeholder="Description"
                       @bind-value="@order.Description" />
            }
            @if (state.User.IsInRole("customer"))
            {
                <p>@order.Description</p>
            }
        </div>
    </div>
    <div class="form-group row">
        <label for="code" class="col-sm-2 col-form-label">
            Code
        </label>
        <div class="col-sm-10">
            <textarea id="code" class="form-control" placeholder="Code"
                      @bind="@order.Code" style="height: auto; min-height: 300px;"></textarea>
        </div>
    </div>

    <div class="form-group row">
        <label for="code" class="col-sm-2 col-form-label">
            Speciality
        </label>
        <div class="col-sm-10">
            <MatRadioGroup @bind-Value="@SelectedSpec" Items="@specs">
                <ItemTemplate>
                    <div>
                        <MatRadioButton Value="@context">@context.Name</MatRadioButton>
                    </div>
                </ItemTemplate>
            </MatRadioGroup>
        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">
            Rate
        </label>
        <div class="col-sm-10">
            @if (state.User.IsInRole("customer"))
            {
                <MatRadioGroup @bind-Value="@order.Rate" Items="@rates">
                    <ItemTemplate>
                        <div>
                            <MatRadioButton Value="@context">@context</MatRadioButton>
                        </div>
                    </ItemTemplate>
                </MatRadioGroup>

            }
            else
            {
                @order.Rate
            }
        </div>
    </div>

    <a @onclick="EditOrder" class="btn btn-primary m-1">Edit</a>
    if (state.User.IsInRole("freelancer"))
    {
        <a href="freelancersorders" class="btn btn-danger m-1">Cancel</a>
    }
    if (state.User.IsInRole("customer"))
    {
        <a href="customerOrder" class="btn btn-danger m-1">Cancel</a>
    }

    <h3 style="margin-top: 20px;">Comments</h3>

    <div class="form-group row" style="margin-top: 20px;">

        <div class="col-sm-10">
            <input type="text" @bind-value="@message.Text" name="EditComment" class="form-control" placeholder="Comment" />
        </div>

    </div>

    <div class="form-group row" style="margin-top: 20px;">
        <div class="col-sm-10">
            <input type="text" @bind-value="@message.Text" name="EditComment" class="form-control" placeholder="Comment" />
        </div>
        <button @onclick="EditComment" type="submit" class="btn btn-primary m-1">Add comment</button>
    </div>

    <ul>
        @foreach (var mess in messages)
        {
            <li>@mess.SenderUsername:  @mess.Text  @mess.PostedDate</li>

        }
    </ul>
}

}

@code {
    private List<Message> messages;
    private Message message = new Message();

    private Order order = new Order();
    List<Speciality> specs;

    string messageError = "";

    AuthenticationState state;
    private HubConnection hubConnection;

    bool isAccessDenied = false;

    [Parameter]
    public int Id { get; set; }

    int[] rates = new int[] { 1, 2, 3, 4, 5 };

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/broadcastHub"))
            .Build();

        hubConnection.On("ReceiveMessage", () =>
        {
            CallLoadData();
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await LoadData();

    }
    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

    void CallLoadData()
    {
        Task.Run(async () =>
        {
            await LoadData();
        });
    }

    async Task LoadData()
    {
        state = await _stateProvider.GetAuthenticationStateAsync();

        if (state.User.IsInRole("freelancer") || state.User.IsInRole("customer"))
        {

            var responce = await _httpClient.GetAsync($"api/OrderApi/GetOrdersByid/{Id}");
            string json = await responce.Content.ReadAsStringAsync();
            order = JsonConvert.DeserializeObject<Order>(json);

            if (state.User.IsInRole("freelancer") && order.CurrentFreelancer.ApplicationUser.UserName == state.User.Identity.Name)
            {
                isAccessDenied = true;
            }

            if (state.User.IsInRole("customer") && order.Customer.ApplicationUser.UserName == state.User.Identity.Name)
            {
                isAccessDenied = true;
            }
            if (isAccessDenied == false) return;

            var resp = await _httpClient.GetAsync($"api/Comments/GetMessagesByOrder/{Id}");
            string js = await resp.Content.ReadAsStringAsync();
            messages = JsonConvert.DeserializeObject<List<Message>>(js);

            responce = await _httpClient.GetAsync($"api/Specialities/GetAllSpecialities");
            json = await responce.Content.ReadAsStringAsync();
            specs = JsonConvert.DeserializeObject<List<Speciality>>(json);

            SelectedSpec = specs.Find(a => a.Id == order.Speciality.Id);
        }

    }

    Speciality SelectedSpec;
    protected async Task EditOrder()
    {
        order.Speciality = null;
        order.SpecialityId = SelectedSpec.Id;

        string objAsJson = JsonConvert.SerializeObject(order, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });

        var content = new StringContent(objAsJson.ToString(), Encoding.UTF8, "application/json");
        var result = await _httpClient.PutAsync($"api/OrderApi/{Id}", content);
        if (result.IsSuccessStatusCode)
        {
            if (state.User.IsInRole("freelancer"))
                _navigationManager.NavigateTo($"FreelancersOrders");
            if (state.User.IsInRole("customer"))
                _navigationManager.NavigateTo($"CustomerOrder");
        }
        else
        {
            messageError = "Error, try again";
        }

    }
    protected async Task EditComment(){
        message.Order = order;
        message.SenderUsername = state.User.Identity.Name;

        string objAsJson = JsonConvert.SerializeObject(message, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
        var content = new StringContent(objAsJson.ToString(), Encoding.UTF8, "application/json");
        var result = await _httpClient.PostAsync($"api/Comments/", content);

        if (IsConnected) await SendMessage();

        if (result.IsSuccessStatusCode)
        {
        }
        else
        {
            messageError = "Error, try again";
        }
    }
}

