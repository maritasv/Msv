@page "/CustomerOrder"
@using HINVenture.Shared
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@inject ApiAuthenticationStateProvider _StateProvider
@*@attribute [Authorize(Roles = "customer")]*@


@if (isAccessDenied == false)
{
    <p>Access denied</p>
}
else
{

    <h2> Your orders</h2>
    <hr />
    <table width="100%" style="background: #05163D; color: honeydew">
        <tr>
            <td width="14"> </td>
            <td>
                <h4> Add New Order</h4>
            </td>
            <td> </td>
            <td align="right">
                <a class="btn btn-info" href="CreateOrder">Add New Order</a>
            </td>
            <td width="10"> </td>
        </tr>
        <tr>
            <td colspan="2"></td>
        </tr>
    </table>

    <hr />
    @if (showAddrow == true)
    {

    }
    <table width="100%" style="background: #0A2464; color: honeydew">
        <tr>
            <td width="14"> </td>
            <td>
                <h4>Order List</h4>
            </td>

        </tr>
        <tr>
            <td colspan="2"></td>
        </tr>
    </table>

    <table class="table">
        <thead>
            <tr>

                <th>Title</th>
                <th>Description</th>
                <th>Speciality</th>
            </tr>
        </thead>
    </table>
    @if (orders == null)
    {

        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                @foreach (var order in orders)
                {
                    <tr>

                        <th>@order.Title</th>
                        <th>@order.Description</th>
                        <th>
                            @if (order.Speciality != null)
                            {
                                <span>@order.Speciality.Name</span>
                            }
                        </th>
                    </tr>
                }
            </thead>

        </table>
    }
}

@code {


    string ids = "0";
    bool showAddrow = false;
    bool loadFailed;

    bool isAccessDenied = false;
    private List<Order> orders;
    string role;

    protected override async Task OnInitializedAsync()
    {
        var state = await _StateProvider.GetAuthenticationStateAsync();

            if (state.User.IsInRole("customer"))
            {
                isAccessDenied = true;

                var responce = await Http.GetAsync($"api/OrderApi/GetOrdersByCustomer/{state.User.Identity.Name}");
                string json = await responce.Content.ReadAsStringAsync();
                orders = JsonConvert.DeserializeObject<List<Order>>(json);

    //orders = await Http.GetFromJsonAsync<List<Order>>($"api/OrderApi/GetOrdersByCustomer/{state.User.Identity.Name}");
            }
        }
    }

