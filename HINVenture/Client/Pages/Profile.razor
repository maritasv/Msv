@page "/Profile/{username}"
@inject HttpClient _httpClient
@inject NavigationManager _navigationManager
@inject ApiAuthenticationStateProvider _stateProvider

@if (isAccessDenied == false)
{
    <p>Access denied</p>
}
else
{
    <h3>Your profile, @user.ApplicationUser.FullName</h3>

    <hr />
    <div class="form-group row">
        <label for="fullname" class="col-sm-2 col-form-label">
            Fullname
        </label>
        <div class="col-sm-10">
            <input type="text" id="fullname" class="form-control" placeholder="FullName" 
                   @bind-value="@user.ApplicationUser.FullName" />
        </div>
    </div>

    <div class="form-group row">
        <label for="price" class="col-sm-2 col-form-label">
            Price
        </label>
        <div class="col-sm-10">
    <input type="text" id="price" class="form-control" placeholder="Price"
           @bind-value="@user.Price" />
</div>
    </div>
    <div class="form-group row">
        <label for="speciality" class="col-sm-2 col-form-label">
            Choose your speciality
        </label>
        <div class="col-sm-10">
            <MatRadioGroup @bind-Value="@SelectedSpec" Items="@specs">
                <ItemTemplate>
                    <div>
                        <MatRadioButton Value="@context">@context.Name</MatRadioButton>
                    </div>
                </ItemTemplate>
            </MatRadioGroup>
        </div>
    </div>
    <a @onclick="EditProfile" class="btn btn-primary m-1">Edit</a>
    <a href="main" class="btn btn-danger m-1">Cancel</a>

}

@code {

    private FreelancerUser user;
    List<Speciality> specs;

    string messageError = "";

    AuthenticationState state;
    private HubConnection hubConnection;

    bool isAccessDenied = false;

    [Parameter]
    public string Username { get; set; }
  

    protected override async Task OnInitializedAsync()
    {
        state = await _stateProvider.GetAuthenticationStateAsync();

        if (state.User.IsInRole("freelancer"))
        {
            isAccessDenied = true;
            var responce = await _httpClient.GetAsync($"api/Freelancers/GetFreelancerByid/{state.User.Identity.Name}");
            string json = await responce.Content.ReadAsStringAsync();
            user = JsonConvert.DeserializeObject<FreelancerUser>(json);

            responce = await _httpClient.GetAsync($"api/Specialities/GetAllSpecialities");
            json = await responce.Content.ReadAsStringAsync();
            specs = JsonConvert.DeserializeObject<List<Speciality>>(json);

            SelectedSpec = specs.Find(a=>a.Id == user.Specs.Id);
        }
    }

    Speciality SelectedSpec;
    protected async Task EditProfile()
    {
        user.Specs = SelectedSpec;

        string objAsJson = JsonConvert.SerializeObject(user, new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
        var content = new StringContent(objAsJson.ToString(), Encoding.UTF8, "application/json");
        var result = await _httpClient.PutAsync($"api/Freelancers/{user.Id}", content);

        if (result.IsSuccessStatusCode)
        {
            _navigationManager.NavigateTo($"main");
        }
        else
        {
            messageError = "Error, try again";
        }
    }
}
