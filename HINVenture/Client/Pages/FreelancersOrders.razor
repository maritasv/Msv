@page "/freelancersorders"
@using Microsoft.AspNetCore.Authorization
@using System.Runtime.CompilerServices
@inject HttpClient _httpClient
@inject ApiAuthenticationStateProvider _StateProvider


@if (isAccessGranted == false)
{
    <p>Access denied</p>
}
else
{

    <input class="active btn" type="button" value="My orders" @onclick="@(async ()=>await  LoadMyOrders())" />
    <input class="active btn" type="button" value="Available orders" @onclick="@(async ()=>await LoadNewOrders())" />


    @if (orders == null)
    {
        <p>loading</p>
    }
    else
    {
        if (isShowMyOrders)
        {

            <h1>My orders</h1>
        }
        else
        {
            <h1>Available orders</h1>
        }
        <div class="m-2">
            <table class="table table-sm table-striped table-bordered">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Description</th>
                        <th>Posted Date</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in orders)
                    {
                        <tr>
                            <th>@order.Title</th>
                            <th>@order.Description</th>
                            <th>@order.PostedDate</th>
                            <td>
                                @if (!isShowMyOrders)
                                {
                                    <a href="@AcceptOrder(order.Id)" class="btn btn-primary m-1">View Order</a>
                                }
                                else
                                {
                                    <a href="@GetEditUrl(order.Id)" class="btn btn-primary m-1">Edit</a>
                                    <a href="" class="btn btn-danger m-1">Cancel</a>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

@code {

    bool isAccessGranted = true;
    private List<Order> orders;
    AuthenticationState state;

    bool isShowMyOrders = true;

    protected override async Task OnInitializedAsync()
    {
        state = await _StateProvider.GetAuthenticationStateAsync();

        if (state.User.IsInRole("freelancer"))
        {
            isAccessGranted = true;
            await LoadMyOrders();
        }
    }

    async Task LoadMyOrders()
    {
        var responce = await _httpClient.GetAsync($"api/OrderApi/GetOrdersByFreelancer/{state.User.Identity.Name}");
        string json = await responce.Content.ReadAsStringAsync();
        orders = JsonConvert.DeserializeObject<List<Order>>(json);
        isShowMyOrders = true;
    }

    async Task LoadNewOrders()
    {
        var responce = await _httpClient.GetAsync($"api/OrderApi/GetNewOrdersAvailableForFreelancer/{state.User.Identity.Name}");
        string json = await responce.Content.ReadAsStringAsync();
        orders = JsonConvert.DeserializeObject<List<Order>>(json);
        isShowMyOrders = false;
    }



    public string GetEditUrl(int id) => $"/OrderInfo/{id}";

    public string AcceptOrder(int id) => $"/AcceptOrder/{id}";

}